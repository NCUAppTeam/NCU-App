/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as EventsIndexImport } from './routes/events/index'
import { Route as EventsCreateImport } from './routes/events/create'
import { Route as EventsEventIdImport } from './routes/events/$eventId'

// Create/Update Routes

const EventsIndexRoute = EventsIndexImport.update({
  path: '/events/',
  getParentRoute: () => rootRoute,
} as any)

const EventsCreateRoute = EventsCreateImport.update({
  path: '/events/create',
  getParentRoute: () => rootRoute,
} as any)

const EventsEventIdRoute = EventsEventIdImport.update({
  path: '/events/$eventId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/events/$eventId': {
      id: '/events/$eventId'
      path: '/events/$eventId'
      fullPath: '/events/$eventId'
      preLoaderRoute: typeof EventsEventIdImport
      parentRoute: typeof rootRoute
    }
    '/events/create': {
      id: '/events/create'
      path: '/events/create'
      fullPath: '/events/create'
      preLoaderRoute: typeof EventsCreateImport
      parentRoute: typeof rootRoute
    }
    '/events/': {
      id: '/events/'
      path: '/events'
      fullPath: '/events'
      preLoaderRoute: typeof EventsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface FileRoutesByFullPath {
  '/events/$eventId': typeof EventsEventIdRoute
  '/events/create': typeof EventsCreateRoute
  '/events': typeof EventsIndexRoute
}

interface FileRoutesByTo {
  '/events/$eventId': typeof EventsEventIdRoute
  '/events/create': typeof EventsCreateRoute
  '/events': typeof EventsIndexRoute
}

interface FileRoutesById {
  '/events/$eventId': typeof EventsEventIdRoute
  '/events/create': typeof EventsCreateRoute
  '/events/': typeof EventsIndexRoute
}

interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/events/$eventId' | '/events/create' | '/events'
  fileRoutesByTo: FileRoutesByTo
  to: '/events/$eventId' | '/events/create' | '/events'
  id: '/events/$eventId' | '/events/create' | '/events/'
  fileRoutesById: FileRoutesById
}

interface RootRouteChildren {
  EventsEventIdRoute: typeof EventsEventIdRoute
  EventsCreateRoute: typeof EventsCreateRoute
  EventsIndexRoute: typeof EventsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  EventsEventIdRoute: EventsEventIdRoute,
  EventsCreateRoute: EventsCreateRoute,
  EventsIndexRoute: EventsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/events/$eventId",
        "/events/create",
        "/events/"
      ]
    },
    "/events/$eventId": {
      "filePath": "events/$eventId.tsx"
    },
    "/events/create": {
      "filePath": "events/create.tsx"
    },
    "/events/": {
      "filePath": "events/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
