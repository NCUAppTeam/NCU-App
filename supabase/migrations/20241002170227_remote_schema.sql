create table "public"."event_type" (
    "type_id" smallint generated by default as identity not null,
    "type_name" text
);


alter table "public"."event_type" enable row level security;

create table "public"."identities" (
    "identity_no" integer generated by default as identity not null,
    "identity_name" text not null default 'other'::text
);


alter table "public"."identities" enable row level security;

create table "public"."members" (
    "uuid" uuid not null default auth.uid(),
    "created_at" timestamp with time zone not null default now(),
    "name" character varying not null,
    "fk_email" character varying not null default 'auth.users.email'::character varying,
    "fk_identity" integer not null default 5,
    "grad_time" date,
    "avatar" character varying not null default 'http://127.0.0.1:54321/storage/v1/object/public/avatar/defaultAvatar.webp?t=2024-10-02T15%3A40%3A27.045Z'::character varying
);


alter table "public"."members" enable row level security;

alter table "public"."events" add column "type" smallint default '7'::smallint;

CREATE UNIQUE INDEX event_type_pkey ON public.event_type USING btree (type_id);

CREATE UNIQUE INDEX identities_pkey ON public.identities USING btree (identity_no);

CREATE UNIQUE INDEX members_pkey ON public.members USING btree (uuid);

alter table "public"."event_type" add constraint "event_type_pkey" PRIMARY KEY using index "event_type_pkey";

alter table "public"."identities" add constraint "identities_pkey" PRIMARY KEY using index "identities_pkey";

alter table "public"."members" add constraint "members_pkey" PRIMARY KEY using index "members_pkey";

alter table "public"."events" add constraint "events_type_fkey" FOREIGN KEY (type) REFERENCES event_type(type_id) ON UPDATE CASCADE not valid;

alter table "public"."events" validate constraint "events_type_fkey";

alter table "public"."members" add constraint "members_fk_identity_fkey" FOREIGN KEY (fk_identity) REFERENCES identities(identity_no) ON UPDATE CASCADE not valid;

alter table "public"."members" validate constraint "members_fk_identity_fkey";

alter table "public"."members" add constraint "members_uuid_fkey" FOREIGN KEY (uuid) REFERENCES auth.users(id) ON UPDATE CASCADE not valid;

alter table "public"."members" validate constraint "members_uuid_fkey";

grant delete on table "public"."event_type" to "anon";

grant insert on table "public"."event_type" to "anon";

grant references on table "public"."event_type" to "anon";

grant select on table "public"."event_type" to "anon";

grant trigger on table "public"."event_type" to "anon";

grant truncate on table "public"."event_type" to "anon";

grant update on table "public"."event_type" to "anon";

grant delete on table "public"."event_type" to "authenticated";

grant insert on table "public"."event_type" to "authenticated";

grant references on table "public"."event_type" to "authenticated";

grant select on table "public"."event_type" to "authenticated";

grant trigger on table "public"."event_type" to "authenticated";

grant truncate on table "public"."event_type" to "authenticated";

grant update on table "public"."event_type" to "authenticated";

grant delete on table "public"."event_type" to "service_role";

grant insert on table "public"."event_type" to "service_role";

grant references on table "public"."event_type" to "service_role";

grant select on table "public"."event_type" to "service_role";

grant trigger on table "public"."event_type" to "service_role";

grant truncate on table "public"."event_type" to "service_role";

grant update on table "public"."event_type" to "service_role";

grant delete on table "public"."identities" to "anon";

grant insert on table "public"."identities" to "anon";

grant references on table "public"."identities" to "anon";

grant select on table "public"."identities" to "anon";

grant trigger on table "public"."identities" to "anon";

grant truncate on table "public"."identities" to "anon";

grant update on table "public"."identities" to "anon";

grant delete on table "public"."identities" to "authenticated";

grant insert on table "public"."identities" to "authenticated";

grant references on table "public"."identities" to "authenticated";

grant select on table "public"."identities" to "authenticated";

grant trigger on table "public"."identities" to "authenticated";

grant truncate on table "public"."identities" to "authenticated";

grant update on table "public"."identities" to "authenticated";

grant delete on table "public"."identities" to "service_role";

grant insert on table "public"."identities" to "service_role";

grant references on table "public"."identities" to "service_role";

grant select on table "public"."identities" to "service_role";

grant trigger on table "public"."identities" to "service_role";

grant truncate on table "public"."identities" to "service_role";

grant update on table "public"."identities" to "service_role";

grant delete on table "public"."members" to "anon";

grant insert on table "public"."members" to "anon";

grant references on table "public"."members" to "anon";

grant select on table "public"."members" to "anon";

grant trigger on table "public"."members" to "anon";

grant truncate on table "public"."members" to "anon";

grant update on table "public"."members" to "anon";

grant delete on table "public"."members" to "authenticated";

grant insert on table "public"."members" to "authenticated";

grant references on table "public"."members" to "authenticated";

grant select on table "public"."members" to "authenticated";

grant trigger on table "public"."members" to "authenticated";

grant truncate on table "public"."members" to "authenticated";

grant update on table "public"."members" to "authenticated";

grant delete on table "public"."members" to "service_role";

grant insert on table "public"."members" to "service_role";

grant references on table "public"."members" to "service_role";

grant select on table "public"."members" to "service_role";

grant trigger on table "public"."members" to "service_role";

grant truncate on table "public"."members" to "service_role";

grant update on table "public"."members" to "service_role";

create policy "Enable read access for all users"
on "public"."identities"
as permissive
for select
to public
using (true);


create policy "Enable delete for users based on user_id"
on "public"."members"
as permissive
for delete
to authenticated
using ((( SELECT auth.uid() AS uid) = uuid));


create policy "Enable insert for users based on user_id"
on "public"."members"
as permissive
for insert
to authenticated
with check ((( SELECT auth.uid() AS uid) = uuid));


create policy "Enable read access for authenticated users only"
on "public"."members"
as permissive
for select
to authenticated
using (true);


create policy "Enable update for users based on user_id"
on "public"."members"
as permissive
for update
to authenticated
using ((( SELECT auth.uid() AS uid) = uuid))
with check ((( SELECT auth.uid() AS uid) = uuid));



